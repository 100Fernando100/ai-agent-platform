import { useState } from 'react';
import { config } from '../../lib/config';

export function CredentialsDisplay({ enabledServices = {} }) {
  const [showCredentials, setShowCredentials] = useState(false);

  const allCredentials = {
    twilio: { name: 'Twilio Account SID', value: process.env.TWILIO_ACCOUNT_SID || 'ACdemo123456789demo123456789demo12' },
    openai: { name: 'OpenAI API Key', value: process.env.OPENAI_API_KEY || 'sk-demo-key-for-demonstration-only' },
    calendly: { name: 'Calendly API Key', value: process.env.CALENDLY_API_KEY || 'demo_calendly_api_key_123456' },
    airtable: { name: 'Airtable API Key', value: process.env.AIRTABLE_API_KEY || 'demo_airtable_key_789012' },
    sendgrid: { name: 'SendGrid API Key', value: process.env.SENDGRID_API_KEY || 'SG.demo_sendgrid_key_345678' },
    heygen: { name: 'HeyGen API Key', value: process.env.HEYGEN_API_KEY || 'demo_heygen_key_901234' },
    vapi: { name: 'VAPI API Key', value: process.env.VAPI_API_KEY || 'demo_vapi_key_567890' }
  };

  const maskCredential = (credential, visibleChars = 6) => {
    if (!credential) return 'Not configured';
    if (config.isDemoMode || showCredentials) return credential;
    
    const start = credential.substring(0, visibleChars);
    const masked = '*'.repeat(Math.max(0, credential.length - visibleChars));
    return `${start}${masked}`;
  };

  // Filter credentials based on enabled services
  const activeCredentials = Object.entries(allCredentials).filter(([service]) => {
    if (service === 'twilio') return enabledServices.twilio || enabledServices.sms;
    if (service === 'openai') return true; // Always show OpenAI
    return enabledServices[service];
  });

  return (
    <div className="p-6 bg-white rounded-lg shadow">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">API Credentials</h3>
        <button
          onClick={() => setShowCredentials(!showCredentials)}
          className="text-sm text-blue-600 hover:text-blue-800"
        >
          {showCredentials ? 'Hide' : 'Show'} Credentials
        </button>
      </div>

      <div className="space-y-3">
        {activeCredentials.map(([service, cred]) => (
          <div key={service}>
            <label className="text-sm font-medium text-gray-700">{cred.name}</label>
            <input
              type={showCredentials ? "text" : "password"}
              value={maskCredential(cred.value)}
              readOnly
              className="mt-1 block w-full px-3 py-2 bg-gray-50 border border-gray-300 rounded-md text-sm"
            />
          </div>
        ))}
      </div>

      {config.isDemoMode && (
        <div className="mt-4 p-3 bg-blue-50 rounded-md">
          <p className="text-sm text-blue-700">
            ℹ️ Showing {activeCredentials.length} credentials for selected plan
          </p>
        </div>
      )}
    </div>
  );
}
